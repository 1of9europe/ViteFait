name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Tests Backend
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: conciergerie_urbaine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Run backend linting
      working-directory: ./server
      run: npm run lint
    
    - name: Run backend type checking
      working-directory: ./server
      run: npm run type-check
    
    - name: Run backend tests
      working-directory: ./server
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: conciergerie_urbaine_test
        JWT_SECRET: test-secret-key
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Tests Mobile
  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/ios-app/package-lock.json
    
    - name: Install mobile dependencies
      working-directory: ./mobile/ios-app
      run: npm ci
    
    - name: Run mobile linting
      working-directory: ./mobile/ios-app
      run: npm run lint
    
    - name: Run mobile type checking
      working-directory: ./mobile/ios-app
      run: npm run type-check
    
    - name: Run mobile tests
      working-directory: ./mobile/ios-app
      run: npm test

  # Build Backend
  backend-build:
    needs: backend-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Build backend
      working-directory: ./server
      run: npm run build
    
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: server/dist/

  # Build Mobile (iOS)
  mobile-build-ios:
    needs: mobile-tests
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/ios-app/package-lock.json
    
    - name: Install mobile dependencies
      working-directory: ./mobile/ios-app
      run: npm ci
    
    - name: Install iOS dependencies
      working-directory: ./mobile/ios-app
      run: npm run pod-install
    
    - name: Build iOS app
      working-directory: ./mobile/ios-app
      run: npm run build:ios
    
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: mobile/ios-app/ios/build/

  # Deploy to Staging
  deploy-staging:
    needs: [backend-build, mobile-build-ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: server/dist/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # TODO: Add staging deployment logic
        # - Heroku deployment
        # - AWS Elastic Beanstalk
        # - Docker deployment

  # Deploy to Production
  deploy-production:
    needs: [backend-build, mobile-build-ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: server/dist/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # TODO: Add production deployment logic
        # - Heroku deployment
        # - AWS Elastic Beanstalk
        # - Docker deployment
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          Changes:
          - Backend API updates
          - Mobile app improvements
          - Bug fixes and performance optimizations
        draft: false
        prerelease: false 