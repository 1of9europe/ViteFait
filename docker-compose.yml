version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: conciergerie-postgres
    environment:
      POSTGRES_DB: conciergerie_urbaine_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - conciergerie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: conciergerie-api
    environment:
      NODE_ENV: staging
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: conciergerie_urbaine_staging
      JWT_SECRET: staging-jwt-secret-key-change-in-production
      JWT_REFRESH_SECRET: staging-refresh-secret-key-change-in-production
      JWT_EXPIRES_IN: 1h
      STRIPE_SECRET_KEY: sk_test_51H1234567890abcdefghijklmnopqrstuvwxyz
      STRIPE_WEBHOOK_SECRET: whsec_test_webhook_secret
      FRONTEND_URL: http://localhost:3001
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - conciergerie-network
    volumes:
      - ./server:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis pour le cache et les sessions (optionnel)
  redis:
    image: redis:7-alpine
    container_name: conciergerie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - conciergerie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx pour le reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: conciergerie-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - conciergerie-network
    restart: unless-stopped

  # pgAdmin pour la gestion de la base de données (développement uniquement)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: conciergerie-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@conciergerie.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - conciergerie-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  conciergerie-network:
    driver: bridge 